{"remainingRequest":"/Users/jessicaleon/Desktop/challenge/selliaChat.JS/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jessicaleon/Desktop/challenge/selliaChat.JS/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jessicaleon/Desktop/challenge/selliaChat.JS/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jessicaleon/Desktop/challenge/selliaChat.JS/src/components/Chat.vue?vue&type=template&id=2bc3d388&scoped=true&","dependencies":[{"path":"/Users/jessicaleon/Desktop/challenge/selliaChat.JS/src/components/Chat.vue","mtime":1661566673263},{"path":"/Users/jessicaleon/Desktop/challenge/selliaChat.JS/node_modules/cache-loader/dist/cjs.js","mtime":1661216214000},{"path":"/Users/jessicaleon/Desktop/challenge/selliaChat.JS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1661216214460},{"path":"/Users/jessicaleon/Desktop/challenge/selliaChat.JS/node_modules/cache-loader/dist/cjs.js","mtime":1661216214000},{"path":"/Users/jessicaleon/Desktop/challenge/selliaChat.JS/node_modules/vue-loader/lib/index.js","mtime":1661216214312}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}