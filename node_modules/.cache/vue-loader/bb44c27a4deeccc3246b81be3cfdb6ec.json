{"remainingRequest":"/Users/jessicaleon/Desktop/challenge/Private-Chat-with-SocketIO.JS/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jessicaleon/Desktop/challenge/Private-Chat-with-SocketIO.JS/src/components/Chat.vue?vue&type=style&index=0&id=2bc3d388&scoped=true&lang=css&","dependencies":[{"path":"/Users/jessicaleon/Desktop/challenge/Private-Chat-with-SocketIO.JS/src/components/Chat.vue","mtime":1661227829414},{"path":"/Users/jessicaleon/Desktop/challenge/Private-Chat-with-SocketIO.JS/node_modules/css-loader/dist/cjs.js","mtime":1661216214185},{"path":"/Users/jessicaleon/Desktop/challenge/Private-Chat-with-SocketIO.JS/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1661216214448},{"path":"/Users/jessicaleon/Desktop/challenge/Private-Chat-with-SocketIO.JS/node_modules/postcss-loader/src/index.js","mtime":1661216214234},{"path":"/Users/jessicaleon/Desktop/challenge/Private-Chat-with-SocketIO.JS/node_modules/cache-loader/dist/cjs.js","mtime":1661216214000},{"path":"/Users/jessicaleon/Desktop/challenge/Private-Chat-with-SocketIO.JS/node_modules/vue-loader/lib/index.js","mtime":1661216214312}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoucmlnaHQtcGFuZWwgewogIG1hcmdpbi1sZWZ0OiAyNjBweDsKfQo="},{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuKA;AACA;AACA","file":"Chat.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css\" />\n    <section class=\"h-screen flex overflow-hidden\">\n      <div class=\"bg-white w-3/12 p-6\">\n        <h3 class=\"text-2xl mb-8\">Chat en l√≠nea</h3>\n        <div class=\"overflow-auto h-4/5\">\n          <user\n          v-for=\"user in users\"\n          :key=\"user.userID\"\n          :user=\"user\"\n          :selected=\"selectedUser === user\"\n          @select=\"onSelectUser(user)\"\n        />\n        </div>\n      </div>\n      <div class=\"bg-gray-100 w-9/12\">\n        <div class=\"px-20 py-6 border-b\">\n          <message-panel\n          v-if=\"selectedUser\"\n          :user=\"selectedUser\"\n          @input=\"onMessage\"\n          class=\"right-panel\"\n        />\n        </div>\n      </div>\n    </section>\n    <message-panel\n      v-if=\"selectedUser\"\n      :user=\"selectedUser\"\n      @input=\"onMessage\"\n      class=\"right-panel\"\n    />\n  </div>\n</template>\n\n<script>\nimport socket from \"../socket\";\nimport User from \"./User\";\nimport MessagePanel from \"./MessagePanel\";\n\nexport default {\n  name: \"Chat\",\n  components: { User, MessagePanel },\n  data() {\n    return {\n      selectedUser: null,\n      users: [],\n    };\n  },\n  methods: {\n    onMessage(content) {\n      if (this.selectedUser) {\n        socket.emit(\"private message\", {\n          content,\n          to: this.selectedUser.userID,\n        });\n        this.selectedUser.messages.push({\n          content,\n          fromSelf: true,\n        });\n      }\n    },\n    onSelectUser(user) {\n      this.selectedUser = user;\n      user.hasNewMessages = false;\n    },\n  },\n  created() {\n    socket.on(\"connect\", () => {\n      this.users.forEach((user) => {\n        if (user.self) {\n          user.connected = true;\n        }\n      });\n    });\n\n    socket.on(\"disconnect\", () => {\n      this.users.forEach((user) => {\n        if (user.self) {\n          user.connected = false;\n        }\n      });\n    });\n\n    const initReactiveProperties = (user) => {\n      user.hasNewMessages = false;\n    };\n\n    socket.on(\"users\", (users) => {\n      users.forEach((user) => {\n        user.messages.forEach((message) => {\n          message.fromSelf = message.from === socket.userID;\n        });\n        for (let i = 0; i < this.users.length; i++) {\n          const existingUser = this.users[i];\n          if (existingUser.userID === user.userID) {\n            existingUser.connected = user.connected;\n            existingUser.messages = user.messages;\n            return;\n          }\n        }\n        user.self = user.userID === socket.userID;\n        initReactiveProperties(user);\n        this.users.push(user);\n      });\n      // put the current user first, and sort by username\n      this.users.sort((a, b) => {\n        if (a.self) return -1;\n        if (b.self) return 1;\n        if (a.username < b.username) return -1;\n        return a.username > b.username ? 1 : 0;\n      });\n    });\n\n    socket.on(\"user connected\", (user) => {\n      for (let i = 0; i < this.users.length; i++) {\n        const existingUser = this.users[i];\n        if (existingUser.userID === user.userID) {\n          existingUser.connected = true;\n          return;\n        }\n      }\n      initReactiveProperties(user);\n      this.users.push(user);\n    });\n\n    socket.on(\"user disconnected\", (id) => {\n      for (let i = 0; i < this.users.length; i++) {\n        const user = this.users[i];\n        if (user.userID === id) {\n          user.connected = false;\n          break;\n        }\n      }\n    });\n\n    socket.on(\"private message\", ({ content, from, to }) => {\n      for (let i = 0; i < this.users.length; i++) {\n        const user = this.users[i];\n        const fromSelf = socket.userID === from;\n        if (user.userID === (fromSelf ? to : from)) {\n          user.messages.push({\n            content,\n            fromSelf,\n          });\n          if (user !== this.selectedUser) {\n            user.hasNewMessages = true;\n          }\n          break;\n        }\n      }\n    });\n  },\n  destroyed() {\n    socket.off(\"connect\");\n    socket.off(\"disconnect\");\n    socket.off(\"users\");\n    socket.off(\"user connected\");\n    socket.off(\"user disconnected\");\n    socket.off(\"private message\");\n  },\n};\n</script>\n\n<style scoped>\n\n.right-panel {\n  margin-left: 260px;\n}\n</style>\n"]}]}